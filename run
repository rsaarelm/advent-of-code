#!/usr/bin/env python3

from itertools import takewhile
import os
import subprocess
import sys
from typing import IO, Iterable, Optional, Tuple, Union


def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


def die(*args, **kwargs):
    eprint(*args, **kwargs)
    sys.exit(1)


def day_part(filename: str) -> str:
    """Return the day code for filename."""
    return "".join(takewhile(str.isdigit, filename))


def input_files(day: str) -> Iterable[Tuple[str, Optional[str]]]:
    """List input files and matching output files for given day.

    Output will be `None` if output file does not exist."""
    # Sort in order of descending length so that the main input, 1234.txt,
    # will come after all the test cases (1234a.txt etc.) This guarantees that
    # a test case failure will cause the runner to exit early instead of
    # trying to solve the main input with a buggy solution.
    for f in sorted(
        (
            "input/" + f
            for f in os.listdir("input/")
            if day_part(f) == day and f.endswith(".txt")
        ),
        key=lambda x: (-len(x), x),
    ):
        base, _ = os.path.splitext(f)
        output = base + ".out"
        if os.path.exists(output):
            yield (f, output)
        else:
            yield (f, None)


def clean_item(item: str) -> Union[int, str]:
    ret: Union[int, str] = item.strip()
    try:
        ret = int(item)
    except ValueError:
        pass
    return ret


def parse_output(
    output: str,
) -> Tuple[Union[int, str], Optional[Union[int, str]]]:
    output = output.strip()
    if not output:
        die("No output produced")

    # Expecting one or two integers
    results = [clean_item(item) for item in output.split("\n")]
    if len(results) == 1:
        return (results[0], None)
    elif len(results) == 2:
        return (results[0], results[1])
    else:
        raise ValueError("Output was not one or two integers")


def run_input(
    lang: str, prog: str, input: IO
) -> Tuple[Union[int, str], Optional[Union[int, str]]]:
    result = subprocess.run(
        ["just", "run", prog],
        cwd="%s/" % lang,
        stdout=subprocess.PIPE,
        input=input.read(),
        encoding="utf-8",
    )
    if result.returncode != 0:
        die("Terminated with error")
    try:
        return parse_output(result.stdout)
    except ValueError:
        return die("\x1b[1;31minvalid output\x1b[0m\n%s" % result.stdout)


def expected_output(input_path: str) -> Tuple[Optional[int], Optional[int]]:
    base, _ = os.path.splitext(input_path)
    output = base + ".out"
    if not os.path.exists(output):
        return (None, None)
    text = open(output).read()

    # Ignore an empty output file.
    # If piping the output directly to the final output file, an empty file
    # will have been created at this point.
    if not text.strip():
        return (None, None)

    return parse_output(text)


def process_value(value: int, expected: Optional[int]):
    """Either print or test value."""
    if expected is None:
        if sys.stdout.isatty():
            print("\x1b[1;33m%s\x1b[0m" % value)
        else:
            # Don't print ANSI escapes if piping to a file
            print("%s" % value)
    else:
        if value == expected:
            eprint("\x1b[1;32mOK\x1b[0m %s" % value)
        else:
            die(
                "\x1b[1;31mERR\x1b[0m, expected %s, got %s"
                % (expected, value)
            )


def usage():
    eprint("USAGE:")
    eprint("    run [LANG]/[DAY]")
    eprint()
    eprint(
        "For example `./run py/1501` for the Python solution for 2015-12-01"
    )
    sys.exit(1)


if __name__ == "__main__":
    try:
        param = sys.argv[1]
        (lang, prog) = param.split("/")
        day = prog[:4]
        _ = int(day)  # Fail if day has something that isn't numbers

        if not os.path.exists(lang):
            eprint("No subdirectory for langauge '%s'" % lang)
            sys.exit(1)
    except IndexError:
        usage()
    except ValueError:
        usage()

    for [input, output] in input_files(day):
        eprint("Running %s with input %s" % (lang, input))
        with open(input) as f:
            p1, p2 = run_input(lang, prog, f)
        e1, e2 = expected_output(input)

        process_value(p1, e1)
        # Work in progress tasks only print the first item.
        if p2 is not None:
            process_value(p2, e2)
